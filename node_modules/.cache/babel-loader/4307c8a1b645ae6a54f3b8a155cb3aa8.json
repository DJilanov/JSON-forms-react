{"ast":null,"code":"\"use strict\";\n/*\n  The MIT License\n  \n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n  \n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ADDITIONAL_PROPERTIES = 'additionalProperties';\nvar REQUIRED_PROPERTIES = 'required';\n\nvar distinct = function distinct(properties, discriminator) {\n  var known = {};\n  return properties.filter(function (item) {\n    var discriminatorValue = discriminator(item);\n\n    if (known.hasOwnProperty(discriminatorValue)) {\n      return false;\n    } else {\n      known[discriminatorValue] = true;\n      return true;\n    }\n  });\n};\n\nvar Gen =\n/** @class */\nfunction () {\n  function Gen(findOption) {\n    var _this = this;\n\n    this.findOption = findOption;\n\n    this.schemaObject = function (data) {\n      var props = _this.properties(data);\n\n      var schema = {\n        type: 'object',\n        properties: props,\n        additionalProperties: _this.findOption(props)(ADDITIONAL_PROPERTIES)\n      };\n\n      var required = _this.findOption(props)(REQUIRED_PROPERTIES);\n\n      if (required.length > 0) {\n        schema.required = required;\n      }\n\n      return schema;\n    };\n\n    this.properties = function (data) {\n      var emptyProps = {};\n      return Object.keys(data).reduce(function (acc, propName) {\n        acc[propName] = _this.property(data[propName]);\n        return acc;\n      }, emptyProps);\n    };\n\n    this.property = function (data) {\n      switch (typeof data) {\n        case 'string':\n          return {\n            type: 'string'\n          };\n\n        case 'boolean':\n          return {\n            type: 'boolean'\n          };\n\n        case 'number':\n          if (Number.isInteger(data)) {\n            return {\n              type: 'integer'\n            };\n          }\n\n          return {\n            type: 'number'\n          };\n\n        case 'object':\n          if (data == null) {\n            return {\n              type: 'null'\n            };\n          }\n\n          return _this.schemaObjectOrArray(data);\n\n        default:\n          return {};\n      }\n    };\n\n    this.schemaObjectOrArray = function (data) {\n      if (data instanceof Array) {\n        return _this.schemaArray(data);\n      } else {\n        return _this.schemaObject(data);\n      }\n    };\n\n    this.schemaArray = function (data) {\n      if (data.length > 0) {\n        var allProperties = data.map(_this.property);\n        var uniqueProperties = distinct(allProperties, function (prop) {\n          return JSON.stringify(prop);\n        });\n\n        if (uniqueProperties.length === 1) {\n          return {\n            type: 'array',\n            items: uniqueProperties[0]\n          };\n        } else {\n          return {\n            type: 'array',\n            items: {\n              oneOf: uniqueProperties\n            }\n          };\n        }\n      } else {\n        return {\n          type: 'array',\n          items: {}\n        };\n      }\n    };\n  }\n\n  return Gen;\n}();\n/**\n * Generate a JSON schema based on the given data and any additional options.\n * @param {Object} instance the data to create a JSON schema for\n * @param {any} options any additional options that may alter the generated JSON schema\n * @returns {JsonSchema} the generated schema\n */\n\n\nexports.generateJsonSchema = function (instance, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var findOption = function findOption(props) {\n    return function (optionName) {\n      switch (optionName) {\n        case ADDITIONAL_PROPERTIES:\n          if (options.hasOwnProperty(ADDITIONAL_PROPERTIES)) {\n            return options[ADDITIONAL_PROPERTIES];\n          }\n\n          return true;\n\n        case REQUIRED_PROPERTIES:\n          if (options.hasOwnProperty(REQUIRED_PROPERTIES)) {\n            return options[REQUIRED_PROPERTIES](props);\n          }\n\n          return Object.keys(props);\n\n        default:\n          return;\n      }\n    };\n  };\n\n  var gen = new Gen(findOption);\n  return gen.schemaObject(instance);\n};","map":null,"metadata":{},"sourceType":"script"}