{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n  The MIT License\n  \n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n  \n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\nvar cells_1 = require(\"./cells\");\n\nexports.cellReducer = cells_1.cellReducer;\n\nvar get_1 = __importDefault(require(\"lodash/get\"));\n\nvar default_data_1 = require(\"./default-data\");\n\nvar redux_1 = require(\"redux\");\n\nvar renderers_1 = require(\"./renderers\");\n\nexports.rendererReducer = renderers_1.rendererReducer;\n\nvar config_1 = require(\"./config\");\n\nvar core_1 = require(\"./core\");\n\nexports.coreReducer = core_1.coreReducer;\nexports.errorsAt = core_1.errorsAt;\n\nvar uischemas_1 = require(\"./uischemas\");\n\nexports.findMatchingUISchema = uischemas_1.findMatchingUISchema;\n\nvar i18n_1 = require(\"./i18n\");\n\nvar generators_1 = require(\"../generators\");\n\nexports.jsonformsReducer = function (additionalReducers) {\n  if (additionalReducers === void 0) {\n    additionalReducers = {};\n  }\n\n  return redux_1.combineReducers(__assign({\n    core: core_1.coreReducer,\n    renderers: renderers_1.rendererReducer,\n    cells: cells_1.cellReducer,\n    config: config_1.configReducer,\n    uischemas: uischemas_1.uischemaRegistryReducer,\n    defaultData: default_data_1.defaultDataReducer,\n    i18n: i18n_1.i18nReducer\n  }, additionalReducers));\n};\n\nexports.getData = function (state) {\n  return core_1.extractData(get_1.default(state, 'jsonforms.core'));\n};\n\nexports.getSchema = function (state) {\n  return core_1.extractSchema(get_1.default(state, 'jsonforms.core'));\n};\n\nexports.getUiSchema = function (state) {\n  return core_1.extractUiSchema(get_1.default(state, 'jsonforms.core'));\n};\n\nexports.getRefParserOptions = function (state) {\n  return core_1.extractRefParserOptions(get_1.default(state, 'jsonforms.core'));\n};\n\nexports.getDefaultData = function (state) {\n  return default_data_1.extractDefaultData(get_1.default(state, 'jsonforms.defaultData'));\n};\n\nexports.getRenderers = function (state) {\n  return get_1.default(state, 'jsonforms.renderers');\n};\n/**\n * Finds a registered UI schema to use, if any.\n * @param schema the JSON schema describing the data to be rendered\n * @param schemaPath the according schema path\n * @param path the instance path\n * @param fallbackLayoutType the type of the layout to use\n * @param control may be checked for embedded inline uischema options\n */\n\n\nexports.findUISchema = function (uischemas, schema, schemaPath, path, fallbackLayoutType, control, rootSchema) {\n  if (fallbackLayoutType === void 0) {\n    fallbackLayoutType = 'VerticalLayout';\n  } // handle options\n\n\n  if (control && control.options && control.options.detail) {\n    if (typeof control.options.detail === 'string') {\n      if (control.options.detail.toUpperCase() === 'GENERATE') {\n        // force generation of uischema\n        return generators_1.Generate.uiSchema(schema, fallbackLayoutType);\n      }\n    } else if (typeof control.options.detail === 'object') {\n      // check if detail is a valid uischema\n      if (control.options.detail.type && typeof control.options.detail.type === 'string') {\n        return control.options.detail;\n      }\n    }\n  } // default\n\n\n  var uiSchema = uischemas_1.findMatchingUISchema(uischemas)(schema, schemaPath, path);\n\n  if (uiSchema === undefined) {\n    return generators_1.Generate.uiSchema(schema, fallbackLayoutType, '#', rootSchema);\n  }\n\n  return uiSchema;\n};\n\nexports.getErrorAt = function (instancePath, schema) {\n  return function (state) {\n    return core_1.errorAt(instancePath, schema)(state.jsonforms.core);\n  };\n};\n\nexports.getSubErrorsAt = function (instancePath, schema) {\n  return function (state) {\n    return core_1.subErrorsAt(instancePath, schema)(state.jsonforms.core);\n  };\n};\n\nexports.getConfig = function (state) {\n  return state.jsonforms.config;\n};\n\nexports.getLocale = function (state) {\n  return i18n_1.fetchLocale(get_1.default(state, 'jsonforms.i18n'));\n};\n\nexports.getLocalizedSchema = function (locale) {\n  return function (state) {\n    return i18n_1.findLocalizedSchema(locale)(get_1.default(state, 'jsonforms.i18n'));\n  };\n};\n\nexports.getLocalizedUISchema = function (locale) {\n  return function (state) {\n    return i18n_1.findLocalizedUISchema(locale)(get_1.default(state, 'jsonforms.i18n'));\n  };\n};","map":null,"metadata":{},"sourceType":"script"}