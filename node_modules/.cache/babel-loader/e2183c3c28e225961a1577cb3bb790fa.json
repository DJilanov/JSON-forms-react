{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n  The MIT License\n\n  Copyright (c) 2017-2019 EclipseSource Munich\n  https://github.com/eclipsesource/jsonforms\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar union_1 = __importDefault(require(\"lodash/union\"));\n\nvar reducers_1 = require(\"../reducers\");\n\nvar _1 = require(\".\");\n\nvar renderer_1 = require(\"./renderer\");\n/**\n * Map state to cell props.\n *\n * @param state JSONForms state tree\n * @param ownProps any own props\n * @returns {StatePropsOfCell} state props of a cell\n */\n\n\nexports.mapStateToCellProps = function (state, ownProps) {\n  var id = ownProps.id,\n      schema = ownProps.schema,\n      path = ownProps.path,\n      uischema = ownProps.uischema;\n  var rootData = reducers_1.getData(state);\n  var visible = ownProps.visible !== undefined ? ownProps.visible : _1.isVisible(uischema, rootData);\n  var enabled = ownProps.enabled !== undefined ? ownProps.enabled : _1.isEnabled(uischema, rootData);\n\n  var errors = _1.formatErrorMessage(union_1.default(reducers_1.getErrorAt(path, schema)(state).map(function (error) {\n    return error.message;\n  })));\n\n  var isValid = isEmpty_1.default(errors);\n  var rootSchema = reducers_1.getSchema(state);\n  return {\n    data: _1.Resolve.data(rootData, path),\n    visible: visible,\n    enabled: enabled,\n    id: id,\n    path: path,\n    errors: errors,\n    isValid: isValid,\n    schema: schema,\n    uischema: uischema,\n    config: reducers_1.getConfig(state),\n    rootSchema: rootSchema\n  };\n};\n\nexports.mapStateToDispatchCellProps = function (state, ownProps) {\n  var props = exports.mapStateToCellProps(state, ownProps);\n\n  var renderers = ownProps.renderers,\n      otherOwnProps = __rest(ownProps, [\"renderers\"]);\n\n  return __assign({}, props, otherOwnProps, {\n    cells: state.jsonforms.cells || []\n  });\n};\n/**\n * Default mapStateToCellProps for enum cell. Options is used for populating dropdown list\n * @param state\n * @param ownProps\n * @returns {StatePropsOfEnumCell}\n */\n\n\nexports.defaultMapStateToEnumCellProps = function (state, ownProps) {\n  var props = exports.mapStateToCellProps(state, ownProps);\n  var options = ownProps.options !== undefined ? ownProps.options : props.schema.enum;\n  return __assign({}, props, {\n    options: options\n  });\n};\n/**\n * Synonym for mapDispatchToControlProps.\n *\n * @type {(dispatch) => {handleChange(path, value): void}}\n */\n\n\nexports.mapDispatchToCellProps = renderer_1.mapDispatchToControlProps;\n/**\n * Default dispatch to control props which can be customized to set handleChange action\n *\n */\n\nexports.defaultMapDispatchToControlProps = // TODO: ownProps types\nfunction (dispatch, ownProps) {\n  var handleChange = exports.mapDispatchToCellProps(dispatch).handleChange;\n  return {\n    handleChange: ownProps.handleChange || handleChange\n  };\n};","map":null,"metadata":{},"sourceType":"script"}