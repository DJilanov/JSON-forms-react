"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var merge_1 = __importDefault(require("lodash/merge"));
var get_1 = __importDefault(require("lodash/get"));
var react_1 = __importStar(require("react"));
var react_2 = require("@jsonforms/react");
var core_1 = require("@jsonforms/core");
var ExpansionPanelDetails_1 = __importDefault(require("@material-ui/core/ExpansionPanelDetails"));
var IconButton_1 = __importDefault(require("@material-ui/core/IconButton"));
var ExpansionPanel_1 = __importDefault(require("@material-ui/core/ExpansionPanel"));
var find_1 = __importDefault(require("lodash/find"));
var ExpansionPanelSummary_1 = __importDefault(require("@material-ui/core/ExpansionPanelSummary"));
var core_2 = require("@material-ui/core");
var ExpandMore_1 = __importDefault(require("@material-ui/icons/ExpandMore"));
var Avatar_1 = __importDefault(require("@material-ui/core/Avatar"));
var Delete_1 = __importDefault(require("@material-ui/icons/Delete"));
var ArrowUpward_1 = __importDefault(require("@material-ui/icons/ArrowUpward"));
var ArrowDownward_1 = __importDefault(require("@material-ui/icons/ArrowDownward"));
var v1_1 = __importDefault(require("uuid/v1"));
var iconStyle = { float: 'right' };
var ExpandPanelRenderer = function (props) {
    var labelHtmlId = react_1.useState("id" + v1_1.default())[0];
    var childLabel = props.childLabel, childPath = props.childPath, index = props.index, expanded = props.expanded, moveDown = props.moveDown, moveUp = props.moveUp, enableMoveDown = props.enableMoveDown, enableMoveUp = props.enableMoveUp, handleExpansion = props.handleExpansion, removeItems = props.removeItems, path = props.path, rootSchema = props.rootSchema, schema = props.schema, uischema = props.uischema, uischemas = props.uischemas, renderers = props.renderers, config = props.config;
    var foundUISchema = core_1.findUISchema(uischemas, schema, uischema.scope, path, undefined, uischema, rootSchema);
    var appliedUiSchemaOptions = merge_1.default({}, config, uischema.options);
    return (react_1.default.createElement(ExpansionPanel_1.default, { "aria-labelledby": labelHtmlId, expanded: expanded, onChange: handleExpansion(childPath) },
        react_1.default.createElement(ExpansionPanelSummary_1.default, { expandIcon: react_1.default.createElement(ExpandMore_1.default, null) },
            react_1.default.createElement(core_2.Grid, { container: true, alignItems: 'center' },
                react_1.default.createElement(core_2.Grid, { item: true, xs: 7, md: 10 },
                    react_1.default.createElement(core_2.Grid, { container: true, alignItems: 'center' },
                        react_1.default.createElement(core_2.Grid, { item: true, xs: 2, md: 1 },
                            react_1.default.createElement(Avatar_1.default, { "aria-label": 'Index' }, index + 1)),
                        react_1.default.createElement(core_2.Grid, { item: true, xs: 10, md: 11 },
                            react_1.default.createElement("span", { id: labelHtmlId }, childLabel)))),
                react_1.default.createElement(core_2.Grid, { item: true, xs: 5, md: 2 },
                    react_1.default.createElement(core_2.Grid, { container: true, justify: 'flex-end' },
                        react_1.default.createElement(core_2.Grid, { item: true },
                            react_1.default.createElement(core_2.Grid, { container: true, direction: 'row', justify: 'center', alignItems: 'center' },
                                appliedUiSchemaOptions.showSortButtons ? (react_1.default.createElement(react_1.Fragment, null,
                                    react_1.default.createElement(core_2.Grid, { item: true },
                                        react_1.default.createElement(IconButton_1.default, { onClick: moveUp(path, index), style: iconStyle, disabled: !enableMoveUp, "aria-label": "Move up" },
                                            react_1.default.createElement(ArrowUpward_1.default, null))),
                                    react_1.default.createElement(core_2.Grid, { item: true },
                                        react_1.default.createElement(IconButton_1.default, { onClick: moveDown(path, index), style: iconStyle, disabled: !enableMoveDown, "aria-label": "Move down" },
                                            react_1.default.createElement(ArrowDownward_1.default, null))))) : (''),
                                react_1.default.createElement(core_2.Grid, { item: true },
                                    react_1.default.createElement(IconButton_1.default, { onClick: removeItems(path, [index]), style: iconStyle, "aria-label": "Delete" },
                                        react_1.default.createElement(Delete_1.default, null))))))))),
        react_1.default.createElement(ExpansionPanelDetails_1.default, null,
            react_1.default.createElement(react_2.JsonFormsDispatch, { schema: schema, uischema: foundUISchema, path: childPath, key: childPath, renderers: renderers }))));
};
/**
 * Maps state to dispatch properties of an expand pandel control.
 *
 * @param dispatch the store's dispatch method
 * @returns {DispatchPropsOfArrayControl} dispatch props of an expand panel control
 */
exports.ctxDispatchToExpandPanelProps = function (dispatch) { return ({
    removeItems: function (path, toDelete) { return function (event) {
        event.stopPropagation();
        dispatch(core_1.update(path, function (array) {
            toDelete
                .sort()
                .reverse()
                .forEach(function (s) { return array.splice(s, 1); });
            return array;
        }));
    }; },
    moveUp: function (path, toMove) { return function (event) {
        event.stopPropagation();
        dispatch(core_1.update(path, function (array) {
            core_1.moveUp(array, toMove);
            return array;
        }));
    }; },
    moveDown: function (path, toMove) { return function (event) {
        event.stopPropagation();
        dispatch(core_1.update(path, function (array) {
            core_1.moveDown(array, toMove);
            return array;
        }));
    }; }
}); };
var getFirstPrimitiveProp = function (schema) {
    if (schema.properties) {
        return find_1.default(Object.keys(schema.properties), function (propName) {
            var prop = schema.properties[propName];
            return (prop.type === 'string' ||
                prop.type === 'number' ||
                prop.type === 'integer');
        });
    }
    return undefined;
};
/**
 * Map state to control props.
 * @param state the JSON Forms state
 * @param ownProps any own props
 * @returns {StatePropsOfControl} state props for a control
 */
exports.withContextToExpandPanelProps = function (Component) { return function (_a) {
    var ctx = _a.ctx, props = _a.props;
    var dispatchProps = exports.ctxDispatchToExpandPanelProps(ctx.dispatch);
    var childLabelProp = props.childLabelProp, schema = props.schema, path = props.path, index = props.index, uischemas = props.uischemas;
    var childPath = core_1.composePaths(path, "" + index);
    var childData = core_1.Resolve.data(ctx.core.data, childPath);
    var childLabel = childLabelProp
        ? get_1.default(childData, childLabelProp, '')
        : get_1.default(childData, getFirstPrimitiveProp(schema), '');
    return (react_1.default.createElement(Component, __assign({}, props, dispatchProps, { childLabel: childLabel, childPath: childPath, uischemas: uischemas })));
}; };
exports.withJsonFormsExpandPanelProps = function (Component) {
    return react_2.withJsonFormsContext(exports.withContextToExpandPanelProps(react_1.default.memo(Component, function (prevProps, nextProps) {
        return react_2.areEqual(prevProps, nextProps);
    })));
};
exports.default = exports.withJsonFormsExpandPanelProps(ExpandPanelRenderer);
//# sourceMappingURL=ExpandPanelRenderer.js.map